Camera VirtuaL: Em Computação Gráfica, o processo de visualização é obtido através de uma superfície de visualização onde é desenhada toda a informação relativa a um determinado volume de visualização da cena

A câmara virtual pode ser parametrizada, sendo que existem os dois seguintes tipos de volume de visualização:
    -ortogonal: consiste num paralelepípedo cujo raios
    projetores são paralelos, sendo assim a profundidade fixa e não existindo o conceito de distância à câmara. 

    -Perspetivo: pode ser associado a uma pirâmide invertida cujo vértice se localiza na posição da câmara. Insere conceitos como POV e FOV.

A configuraçãoo é feita através das seguintes matrizes:
    -Matriz de visualização: permite movimentar ou rodar a câmara virtual;

    -Matriz de projeção ortográfica: comprime tudo o que se encontra entre o plano anterior e o plano posterior dentro do volume de visualização

    -Matriz de projeção em perspetiva: comprime tudo o que se encontra entre o plano anterior e o plano posterior dentro do volume canónico 

    -Matriz de viewport: transforma as coordenadas do WebGL (eixos x e y compreendidos entre -1 e 1) em coordenadas do dispositivo (eixos x e y compreendidos entre 0 e 1).

NOTA: os comentarios do tutorial 3 foram apagados para melhor compreensão do que estamos a fazer e alterar, visto que eles foram alterados


Vamos adicionar um ficheiro chamado camara.js onde criamos os metodos para a criação de matrizes relativas à camara.

Vamos criar as matrizes necessarias para configurar a camara virtual.

    -Matriz de visualização: devolve um array de 2d com a matriz de visualização tendo em conta os parâmetros de entrada. Esses parametros de entrada sao vetores locais referentes À direita, cima e frente da camara bem como a posição da camara em coordenadas mundo.

    -Matriz de Projeção: devolve um array de 2d com a matriz de projecao ortografica tendo em conta os parametros de entrada. 

    -Matriz de projeção (perspetiva):A função que acabaste de criar devolve um array de 2 dimensões com a matriz de projeção
    em perspetiva tendo em conta os parâmetros de entrada. Esses parâmetros de entrada são
    a distância do plano ao qual os objetos serão projetados (para o mesmo tamanho de
    câmara, quanto maior a distância maior serão os objetos), o comprimento da câmara, a
    altura da câmara, o plano de corte anterior e o plano de corte posterior, respetivamente.

    -Matriz de ViewPort: A função que acabaste de ciar devolve um array de duas dimensões com a matriz de
    viewport tendo em conta os parâmetros de entrada especificados. Estes parâmetros são o
    áximo e mínimo de cada eixo (X e Y entre -1 e 1).


Assim acabamos de fazer as matrizes necessarias para o bom funcionamento da camara. Para isto temos de as aplicar a todos os objetos. Para isto é colocar dentro dos shaders que existem dentro do programa. Por isso temos de adaptar o codigo do vertexShader

O vertex Shader está pronto para receber estas informações. Agora precisamos de ir ao app.js e mandar essa info para o shader. 

Depois disto, já temos onde guardar a localização de cada variavel. para isto é necessario ir buscar as respetivas posições. Para isso iremos utilizar a mesma função que utilizamos no tutorial anterior, SendDataToShaders();

Posteriormente, vamos à função loop e criar uma camara virtual. 
